@page "/Admin/ElementForms/{categoryId:int}"
@attribute [Microsoft.AspNetCore.Authorization.Authorize(Roles = Roles.Admin)]
@rendermode InteractiveServer

@using FsElements.Data.Elements
@using FsElements.Services
@inject IElementCategoriesService CategoriesService
@inject IJSRuntime JsRuntime

<h3>Forms for <b>@categoryName</b></h3>

<a class="mt-2 mb-3" href="/Admin/ElementCategories">Back</a>

@if (CategoryId.HasValue)
{
    <EditForm class="mb-3" Model="InputModel" OnSubmit="OnSaveItem">
        <div>Add data:</div>    
        <div class="row">
            <div class="col-1 text-end">Name:</div>
            <div class="col-3">
                <InputText @bind-Value="InputModel.Name" />
            </div>
            <div class="col-1">Image:</div>
            <div class="col-3">
                <InputFile OnChange="OnFileSelected" />
                @if (showSelectFileError)
                {
                    <span class="validation-message">Please select file</span>
                }
            </div>
            <div class="col-1">
                <button class="btn btn-primary">Add</button>
            </div>
        </div>
    </EditForm>
}

@if (forms != null)
{
    <table class="table">
        <thead>
            <tr>
                <td>Id</td>
                <td>Name</td>
                <td>Image</td>
                <td></td>
            </tr>
        </thead>
        <tbody>
            @foreach (var form in forms)
            {
                <tr>
                    <td>@form.Id</td>
                    <td>@form.Name</td>
                    <td>
                        <img class="thumb" src="/Images/Forms/@form.Image" />
                    </td>
                    <td>
                        <div>
                            <button class="btn btn-danger btn-sm" @onclick="() => OnDeleteClick(form.Id)">Delete</button>
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<style>
    .thumb {
        height: 75px;
    }
</style>

@code {
    [Parameter]
    public int? CategoryId { get; set; }
    private string categoryName = "";
    private List<ElementForm>? forms;
    private ElementForm InputModel = new ();
    private IBrowserFile? browserFile;
    private bool showSelectFileError = false;    

    protected override async Task OnInitializedAsync()
    {        
        if (CategoryId != null)
        {
            var category = await CategoriesService.GetCategoryById(CategoryId.Value);
            if (category != null)
            {
                categoryName = category.Name!;
                await LoadData();
            }
        }
    }

    private async Task LoadData()
    {        
        forms = await CategoriesService.GetFormsByCategoryId(CategoryId!.Value);
    }

    private async Task OnDeleteClick(int id)
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Do you want to delete?");
        if (confirmed)
        {
            await CategoriesService.DeleteForm(id);
            await LoadData();
        }
    }

    private void OnFileSelected(InputFileChangeEventArgs args)
    {
        browserFile = args.File;
        showSelectFileError = false;
    }

    private async Task OnSaveItem(EditContext args)
    {
        if (browserFile == null)
        {
            showSelectFileError = true;
            return;
        }

        await CategoriesService.AddForm(InputModel.Name!, CategoryId!.Value, browserFile);
        InputModel = new();
        await LoadData();
    }

    
}
